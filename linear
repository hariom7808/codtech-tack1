import pandas as pd 
# Load the dataset
df = pd.read_csv('housing_prices.csv')
print(df.head())

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score

# Handle missing values (if any)
df = df.dropna()

# Encode categorical variables (if any)
# For simplicity, let's assume 'Location' is a categorical variable
df = pd.get_dummies(df, columns=['Location'], drop_first=True)

# Split the data into features and target variable
X = df.drop('Price', axis=1)
y = df['Price']

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Standardize the features (optional but recommended)
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

import matplotlib.pyplot as plt
import seaborn as sns

# Visualize the relationships between features and the target variable
sns.pairplot(df)
plt.show()

# Train the linear regression model
model = LinearRegression()
model.fit(X_train, y_train)

# Get the coefficients of the model
print("Coefficients:", model.coef_)
print("Intercept:", model.intercept_)

# Make predictions on the testing set
y_pred = model.predict(X_test)

# Evaluate the model
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print("Mean Squared Error:", mse)
print("R-squared:", r2)

# Visualize the actual vs predicted prices
plt.scatter(y_test, y_pred)
plt.xlabel("Actual Prices")
plt.ylabel("Predicted Prices")
plt.title("Actual vs Predicted Prices")
plt.show()


